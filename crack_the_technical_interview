我在公司做过面试官，面试过应聘者；也到过其他公司作为应聘者，面试过大公司。

十大错误姿势：

1.只在计算机上练习

白板代码可没得调试环境可用。必须要养成先思考，论证可行再动笔码代码的良好习惯。

2. 不做行为面试演练

用一些小故事去打动面试官。带上一些项目的细节描述，能够体现出你的工作能力。

3.不做模拟面试

找到僚机帮你把脉。

4.死记硬背不消化

先动手解决各种问题，然后再看答案，千万不要贪多图快。

5.不和面试官沟通你的思路


6.写代码过于仓促

代码写得草率容易显得基础不扎实

7. 代码不够严谨，可维护性差

8.不做测试

9.修正bug引入更多bug

10.轻言放弃

一些名企的面试套路
有调杆员
微软见到招聘经理说明前面表现不错，
亚马逊非常关注扩展性，经常问面向对象
谷歌非常看重设计可扩展系统，谷歌喜欢位操作问题。
facebook希望应聘者使用任何语言快速构建优雅，可扩展解决方案。

写简历的要点
10年之内，写到1页纸

工作经历描述思路
描述做过的事情，怎么做的，达到如何效果 量化量化，再量化

项目经历描述
2～4个最重要的
使用哪些语言和技术，怎么做的，达到了什么效果

提前准备行为面试的故事

最难的部分
有什么收获
最有意思的部分
最难解的bug
最享受的过程
与团队成员的冲突

有哪些缺点？主要思路是不重视细节，然后怎么克服缺点的
最难处理的问题。

必须掌握的知识
数据结构部分：
链表，二叉树，单词查找树trie，栈，队列，数组列表，散列表

算法部分：
广度优先搜索
深度优先搜索
二分查找
归并排序
快速排序
树的插入/查找

概念
位操作
单例设计模式
工厂设计模式
内存(栈和堆）
递归
大O空间

2的幂表非常方便处理扩展性问题，建议默写一张

解决问题5步走
1.提问，消除疑议 好的问题大概是：数据类型，有多少数据，需要什么假定条件，用户都是谁？
2.设计算法
3.写伪代码，务必声明接下来会写真实代码
4.不紧不慢
5.测试写好的代码，仔细修正错误


拷问算法的几个问题：
空间复杂度和时间复杂度
碰到大量数据会怎么样
设计会引入其他问题么
如果有其他问题，如何取舍
善用特定条件

算法题5种解法
1.举例法
2.模式匹配法
3.简化推广法
4.简单构造法 递归
5.数据结构头脑风暴 链表，数组，二叉树，堆

好代码的几个标准
1.正确
2.高效
3.简洁
4.易读
5.可维护

多用数据结构，适当重用代码，模块化，灵活，健壮

一般来说，求职者被拒主要是因为编程与算法功底不过关，这方面要狠下功夫。

能学到知识及公司对你职业生涯的影响远比薪水来得重要。
需要考虑以下因素：
1.公司知名度
2.学到感兴趣的东西
3.发展机会
4.公司团队是否处于上升期
5.公司位置

关于offer谈判，开出比预期稍微高的价码。了解面试定的职级。让招聘方参照内部同等级别同事定薪水即可。
和面试官保持联络。

